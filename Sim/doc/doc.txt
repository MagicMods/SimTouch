├── shaders/
│   ├── shaderLoader.js     # Loads shader files
│   ├── shaderManager.js    # Manages shader programs
│   └── *.{vert,frag}      # Shader source files
├── renderer/
│   ├── gridRenderer.js     # Grid visualization
│   ├── particleRenderer.js # Particle rendering
│   └── debugRenderer.js    # Debug visualization
├── simulation/
│   ├── fluidSim.js        # Main simulation controller
│   └── fluidSolver.js     # Physics solver
└── main.js     





Particles
├── Properties
│   ├── Count
│   ├── Size
│   ├── Opacity
│   └── Color
├── Physics
│   ├── Gravity
│   ├── Air Friction
│   ├── Collision
│   │   ├── Enable Collisions
│   │   ├── Repulsion
│   │   ├── Bounce
│   │   └── Collision Damping
│   ├── Rest State
│   │   ├── Min Speed
│   │   └── Min Move
│   └── Turbulence
│       ├── Enable
│       ├── Strength
│       ├── Scale
│       ├── Speed
│       ├── Complexity
│       ├── Roughness
│       ├── Rotation
│       └── Inward Push
├── Boundary
│   ├── Size
│   ├── Wall Friction
│   ├── Bounce
│   └── Visual
│       ├── Color
│       └── Line Width
├── Animation
│   └── Speed
├── Mouse Input
│   ├── Attractor Mode
│   ├── Input Radius
│   └── Input Strength
├── Debug
│   ├── Show Debug Overlay
│   ├── Show Velocity Field
│   ├── Show Pressure Field
│   ├── Show Boundaries
│   ├── Show FLIP Grid
│   ├── Show Noise Field
│   └── Noise Field Resolution
├── FLIP
│   ├── PIC / FLIP
│   └── Pressure Iterations
└── Grid
    ├── Density Map
    │   ├── Show Density
    │   ├── Opacity
    │   ├── Min Density
    │   └── Max Density
    └── Gradient
        ├── Point 1
        │   ├── Position
        │   ├── Red
        │   ├── Green
        │   └── Blue
        └── [Point 2..n]


        



# Coordinate System Standard

## Application Space [0,1]
- All simulation coordinates use [0,1] space
- Origin (0,0) at top-left
- (1,1) at bottom-right
- Center at (0.5, 0.5)
- Circular boundary radius: 0.475

## WebGL Transformation
- Single transformation in vertex shader
- Converts [0,1] to [-1,1] clip space
- No other coordinate transformations in the system




1. Fluid Dynamics
Viscosity simulation
Surface tension
Vorticity confinement
Temperature influence
Density variations
2. Pattern Generation
Voronoi diagrams for particle distribution
Cellular automata rules
Reaction-diffusion patterns
Flocking behavior
Crystal growth patterns
3. Force Fields
Magnetic fields
Electric charge simulation
Wind fields
Vortex fields
Custom force field editor
4. Particle Properties
Particle age/lifetime
Color based on velocity/density
Variable particle masses
Particle merging/splitting
State changes (solid/liquid/gas)
5. Cellular Automata Features
Rule-based behavior
Multi-state particles
Particle-automata interaction
Rule editor
Pattern presets
6. Advanced Visualization
Real-time Voronoi visualization
Density field visualization
Velocity field streamlines
Particle pressure maps
Pattern evolution tracking








# Files to analyze:
- gridRenderer.js
- gridRenderModes.js

# Focus area:
- Method: getTotalCells()
- Related functionality: density calculations

# Please analyze:
1. Direct method calls
2. Data dependencies
3. Initialization requirements
4. Runtime usage

# Key questions:
1. Where is this method called?
2. What data depends on it?
3. What would break if removed?





## IDE-Specific Features
- Active Document: Current file in VS Code editor
- Output Pane: Shows running code output
- Integrated Terminal: Command execution
- Unit Test Support: Test runner integration

## Response Structure
1. Use headers with # for sections
2. Include file paths for code changes
3. Show existing code context
4. Indicate language for syntax highlighting
5. Use windows-specific paths (c:/)
6. Reference VS Code features when relevant

## Guidelines
1. One reply per conversation turn
2. Don't wrap whole response in backticks
3. Include language identifier
4. Use ...existing code... for context
5. Add filepath comments when specific
6. Consider VS Code environment

Save this as `copilot_formatting.md` for reference.
## IDE-Specific Features
- Active Document: Current file in VS Code editor
- Output Pane: Shows running code output
- Integrated Terminal: Command execution
- Unit Test Support: Test runner integration

## Response Structure
1. Use headers with # for sections
2. Include file paths for code changes
3. Show existing code context
4. Indicate language for syntax highlighting
5. Use windows-specific paths (c:/)
6. Reference VS Code features when relevant

## Guidelines
1. One reply per conversation turn
2. Don't wrap whole response in backticks
3. Include language identifier
4. Use ...existing code... for context
5. Add filepath comments when specific
6. Consider VS Code environment

Save this as `copilot_formatting.md` for reference.